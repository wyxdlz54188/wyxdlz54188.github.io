<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>当年iOS_jalibreak的那些事</title>
      <link href="/2025/03/11/2025_03_11_14_37_25/"/>
      <url>/2025/03/11/2025_03_11_14_37_25/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这里有一些付费的内容，需要付费才能阅读，请私信李子付费后获取密码。" data-whm="这里有一些付费的内容，需要付费才能阅读，请私信李子付费后获取密码。">  <script id="hbeData" type="hbeData" data-hmacdigest="22aa7114153c069fc8b08e228086df4783c25e68964406ae4c2a7cd8547844a9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘿，bro。这里要输入密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>YDPEN_jailbreak：有道词典笔ADB权限获取教程</title>
      <link href="/2025/03/10/2025_3_10_6_42_00/"/>
      <url>/2025/03/10/2025_3_10_6_42_00/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转载自<a href="https://m.bilibili.com/opus/1041644000127221764?plat_id=35&share_from=article&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1741365791&unique_k=3UbJ6rn">听秋念</a>，新定义有道词典笔的破解过程名为<em><strong>YDPEN_jalibreak</strong></em>。</p><p>有道词典笔早期好像使用的是安卓系统？但后面出的笔都不是安卓系统，而是基于<strong>linux的词典笔os</strong>。故即使开启有道词典笔的adb，依然无法实现安装apk等功能，仅限折腾着玩玩罢了。</p><p><strong>操作有风险，玩机需谨慎。</strong> 因任何操作造成的包括但不限于变砖、炸 mini app 等损失，作者均不承担任何责任，也没有义务帮你修复。如有侵权，联系删除。</p><p>有道词典笔一直都带有adb开启入口，只需多次点击“法律监管”中的文本即可打开。按照提示输入<code>adb shell auth</code>，则会出现一个输入密码的提示<code>YoudaoDictionaryPen-xxx&#39;s password:</code>。但adb打开并不意味着结束，当你尝试使用adb连接设备时，会弹出“login with ‘adb shell auth’ to continue”。在早期的系统版本中，这个密码被设置为<strong>CherryYoudao</strong>，但当词典笔os出现后，adb密码开始使用md5储存，导致你无法通过解包固件获得明文。</p><p>本文采用大佬SkySight-666的方案加以改进，靠中间人攻击劫持更新请求从而替换更新包。</p><p>参考链接：<a href="https://github.com/orgs/PenUniverse/discussions/250">参考文章1</a> <a href="https://github.com/orgs/PenUniverse/discussions/277">参考文章2</a>。</p><p>本文用到的全部工具：<a href="https://www.123684.com/s/sE1hjv-mklwd">下载</a>（提取码：0m8B）。</p><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><h3 id="一、通过抓包抓取系统全量包"><a href="#一、通过抓包抓取系统全量包" class="headerlink" title="一、通过抓包抓取系统全量包"></a>一、通过抓包抓取系统全量包</h3><p>使用词典笔连接电脑热点，启用wireshark对热点所在连接进行抓包，词典笔检查更新，在wireshark中找到如图post请求，抓到后可以停止抓包。（图片来自LittleSadSheep）</p><h3 id="二、重新发送更新请求，获取全量包链接"><a href="#二、重新发送更新请求，获取全量包链接" class="headerlink" title="二、重新发送更新请求，获取全量包链接"></a>二、重新发送更新请求，获取全量包链接</h3><p>找一个HTTP测试网站，这里我用的是SOJSON，将Header设置为，将你在获得的数据填入，发送如下请求：</p><p>（图片来自LittleSadSheep）</p><p>请求完毕后，我们会获得一个包含完整包链接的json。</p><p><strong>特别注意：</strong> 这不是所有型号通用的，你要自己抓自己对应的更新包，然后取出其中deltaurl的值，下载更新包，然后使用RKDevTool-高级功能，选择固件后点击解包。</p><h3 id="三、解包并修改adb密码"><a href="#三、解包并修改adb密码" class="headerlink" title="三、解包并修改adb密码"></a>三、解包并修改adb密码</h3><p>在Output文件夹中，我们可以看到解好的包。对于x7pro来说，需要进入Android文件夹并分解rootfs分区，最终在&#x2F;usr&#x2F;bin下找到adbd_auth.sh，打开它，找到其中的md5值，记录下来备用。</p><p>使用winhex替换md5值，打开winhex并打开你的完整包img，开启搜索，搜索前面记录的md5值。</p><p><strong>千万注意：</strong> 这里有一个网易挖的坑！这边代码用的echo会在你输入密码之后加一个换行符，导致密码md5改变，最终校验失败。这也是大部分升级成功却依旧密码错误的原因之一！因此我们需要想办法在自己的密码转为md5前也加上换行符。</p><p>总之，我们把带换行符一起转换的md5用来替换原img中的md5，然后保存文件。注意：此时文件大小未发生改变，大小一个字节也没变！</p><h3 id="四、计算修改后的文件校验码"><a href="#四、计算修改后的文件校验码" class="headerlink" title="四、计算修改后的文件校验码"></a>四、计算修改后的文件校验码</h3><p>编辑getnewmd5.py，使得segment_sizes数组中的值为前面抓包抓到的每一个endpos的值，有多少就加多少，每个机器值可能是不一样多的。然后在cmd中执行<code>python getnewmd5.py &#123;修改后的img路径&#125;</code>，并紧跟着执行<code>certutil -hashfile &#123;修改后的img路径&#125; md5</code>，随后我们会获得如图所示的分片md5和整体md5。</p><p>还需要计算一个img的sha256值，我这边使用的是7zip，得到修改后的img的sha256值，留存备用。</p><h3 id="五、搭建更新服务器"><a href="#五、搭建更新服务器" class="headerlink" title="五、搭建更新服务器"></a>五、搭建更新服务器</h3><p>首先自行安装<strong>nodejs</strong>，然后编辑<strong>YDPen.js</strong>，将<strong>JsonData</strong>的内容全部替换为前面抓包抓到的内容，然后手动修改<strong>segmentMd5</strong>中每一个分块的md5值为前面计算得到的md5值，并修改<strong>bakUrl和deltaUrl</strong>为<code>http://&#123;本机局域网ip&#125;:14514/你修改的完整包.img</code>，随后修改<code>md5sum</code>为前面计算的完整img的md5，<code>sha</code>修改为计算的sha256值。</p><p>下拉到js下方部分，修改<code>/product/1717746496/*********/ota/checkVersion</code>为你自己抓到的请求url，保存文件。</p><p>开启两个cmd，一个执行<code>python httpserver.py &#123;img路径&#125;</code>，另一个执行<code>node YDPen.js</code>，同时修改一下host，把<code>iotapi.abupdate.com</code>劫持到本机ip，并执行<code>ipconfig /flushdns</code>来刷新dns。</p><h3 id="六、更新自定义固件"><a href="#六、更新自定义固件" class="headerlink" title="六、更新自定义固件"></a>六、更新自定义固件</h3><p>在词典笔连接电脑热点的情况下检查更新，会检测到一个很大的更新包，直接更新即可。</p><h3 id="七、获得adb权限，美美折腾"><a href="#七、获得adb权限，美美折腾" class="headerlink" title="七、获得adb权限，美美折腾"></a>七、获得adb权限，美美折腾</h3><p>更新完毕后，待设备重启，再次去法律监管里面连击打开adb，此时连接电脑执行<code>adb shell auth</code>并输入前面转换为md5的密码明文，回车，见证奇迹。</p><p>可以看到adb连接成功，密码正确，并成功获得shell的root权限。</p><p>至此，教程结束。感谢各位大佬的支持，本文总结了多位大佬的经验，并加以修改，解决了一些很头疼的问题，比如那个恶心人的密码换行符以及sed修改不了img等。如有疑问，欢迎评论区讨论，谢谢大家！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有道词典笔破解</title>
      <link href="/2025/03/07/2025_03_07_20_40/"/>
      <url>/2025/03/07/2025_03_07_20_40/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于-YDPEN-jailbreak"><a href="#关于-YDPEN-jailbreak" class="headerlink" title="关于 YDPEN_jailbreak"></a>关于 YDPEN_jailbreak</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>转载自<a href="https://m.bilibili.com/opus/1041644000127221764?plat_id=35&share_from=article&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1741365791&unique_k=3UbJ6rn">听秋念</a></p><p>新定义有道词典笔的破解过程名为<em><strong>YDPEN_jalibreak</strong></em></p><blockquote><p>有道词典笔早期好像使用的是安卓系统？ 但后面出的笔都不是安卓系统 而是基于<strong>linux的词典笔os</strong> 故即使开启有道词典笔的adb依然无法实现安装apk等功能 仅限折腾着玩玩罢了。</p><p>操作有风险，玩机需谨慎。因任何操作造成的包括但不限**于变砖、炸 mini app ……**损失作者均不承担任何责任 也没有义务帮你修复 如有侵权联系删除</p><p>有道词典笔一直都带有adb开启入口 只需多次点击’法律监管’中的文本即可打开</p><p>按照提示输入<code>adb shell auth</code>则会出现一个输入密码的提示<code>YoudaoDictionaryPen-xxx&#39;s password:</code></p><p>但adb打开并不意味着结束 当你尝试使用adb连接设备时 会弹出login with “adb shell auth” to continue.</p><p>在早期的系统版本中，这个密码被设置为<strong>CherryYoudao</strong> 但当词典笔os出现后 adb密码开始使用md5储存 导致你无法通过解包固件获得明文</p><p>本文采用大佬SkySight-666的方案加以改进 靠中间人攻击劫持更新请求从而替换更新包</p><p>参考链接：<a href="https://github.com/orgs/PenUniverse/discussions/250">参考文章 1</a>  <a href="https://github.com/orgs/PenUniverse/discussions/277">参考文章 2</a></p></blockquote><p>本文用到的全部工具   <a href="https://www.123684.com/s/sE1hjv-mklwd" title="文所有用到的工具">下载</a>  提取码:0m8B</p><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p>首先，通过抓包抓取系统全量包</p><p>使用词典笔连接电脑热点，启用wireshark对热点所在连接进行抓包，词典笔检查更新，在wireshark中找到如图post请求，抓到后可以停止抓包（图片来自LittleSadSheep）</p><p>重新发送更新请求，获取全量包链接</p><p>找一个HTTP测试网站，这里我用的是SOJSON，将Header设置为，将你在获得的数据填入，发送如下请求：</p><p>图片来自LittleSadSheep</p><p>请求完毕我们会获得一个包含完整包链接的json</p><p>特别注意 这不是所有型号通用的 你要自己抓自己对应的更新包 然后取出其中deltaurl的值 下载更新包 然后使用RKDevTool-高级功能 选择固件后点击解包</p><p>随后，在Output文件夹中我们可以看到解好的包 对于x7pro来说，需要进入Android文件夹并分解rootfs分区，最终在&#x2F;usr&#x2F;bin下找到adbd_auth.sh 打开它</p><p>找到其中的md5值 记录下来备用</p><p>使用winhex替换md5值</p><p>打开winhex并打开你的完整包img，开启搜索，搜索前面记录的md5值。</p><p>md5值</p><p>千万注意，这里有一个网易挖的坑！！这边代码用的echo会在你输入密码之后加一个换行符 导致密码md5改变 最终校验失败 这也是大部分升级成功却依旧密码错误的原因之一！因此我们需要想办法在自己的密码转为md5前也加上换行符。我采用的方案是询问gpt（</p><p>总之我们把带换行符一起转换的md5用来替换原img中的md5 然后保存文件</p><p>注意：此时文件大小未发生改变 大小一个字节也没变！</p><p>计算修改后的文件校验码</p><p>编辑getnewmd5.py，使得segment_sizes数组中的值为前面抓包抓到的每一个endpos的值，有多少就加多少，每个机器值可能是不一样多的，然后在cmd中执行’python getnewmd5.py {修改后的img路径}’，并紧跟着执行’certutil -hashfile {修改后的img路径} md5’,随后我们会获得如图所示的分片md5和整体md5</p><p>计算md5</p><p>还需要计算一个img的sha256值，我这边使用的是7zip 得到修改后的img的sha256值 留存备用</p><p>sha256计算</p><p>搭建更新服务器</p><p>首先自行安装<strong>nodejs</strong>然后编辑<strong>YDPen.js</strong>，将<strong>JsonData</strong>的内容全部替换为前面抓包抓到的内容，然后手动修改<strong>segmentMd5</strong>中每一个分块的md5值为前面计算得到的md5值，并修改<strong>bakUrl和deltaUrl</strong>为<code>http://&#123;本机局域网ip&#125;:14514/你修改的完整包.img</code>，随后修改’md5sum’为前面计算的完整img的md5，sha修改为计算的sha256值</p><p>下拉到js下方部分，修改’&#x2F;product&#x2F;1717746496&#x2F;*********&#x2F;ota&#x2F;checkVersion’为你自己抓到的请求url，保存文件。</p><p>前5处修改</p><p>第6处修改</p><p>开启两个cmd，一个执行<code>python httpserver.py &#123;img路径&#125;</code>，另一个<strong>执行node YDPen.js</strong>，同时修改一下host，把’iotapi.abupdate.com’劫持到本机ip，并执行ipconfig &#x2F;flushdns来刷新dns</p><p>搭建服务器</p><p>更新自定义固件</p><p>在词典笔连接电脑热点的情况下检查更新，会检测到一个很大的更新包，直接更新即可</p><p>获得adb权限，美美折腾</p><p>更新完毕后，待设备重启，再次去法律监管里面连击打开adb，此时连接电脑执行<code>adb shell auth</code>并输入前面转换为md5的密码明文，回车，见证奇迹</p><p>adb密码校验成功</p><p>可以看到adb连接成功，密码正确，并成功获得shell的root权限</p><p>至此，教程结束</p><p>感谢各位大佬的支持，本文总结了多位大佬的经验，并加以修改，解决了一些很头疼的问题，比如那个恶心人的密码换行符以及sed修改不了img等</p><p>如有疑问欢迎评论区讨论，谢谢大家！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>探索iOS插件源</title>
      <link href="/2025/03/06/2025_03_6_20_36_02/"/>
      <url>/2025/03/06/2025_03_6_20_36_02/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这是一个无效密码，请重试。" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6bb2eeda4cdc416befe4e6a1044ae8ab0fd528709c391bf5d3dc02e101927ed"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘿，bro。这里要输入密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>江中论坛</title>
      <link href="/2025/02/14/2025_02_14_20_20_08/"/>
      <url>/2025/02/14/2025_02_14_20_20_08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="你好江中校友，在这里你可以畅所欲言"><a href="#你好江中校友，在这里你可以畅所欲言" class="headerlink" title="你好江中校友，在这里你可以畅所欲言"></a>你好江中校友，在这里你可以畅所欲言</h2><p>请登录github账号后即可评论<br>森林冰火人<a href="https://kkgithub.com/wyxdlz54188/wyxdlz54188.github.io/releases/download/flashgame/slbhr.swf">下载</a><br>Flash启动器<a href="https://github.com/wyxdlz54188/wyxdlz54188.github.io/releases/download/flashgame/FLASH.exe">下载</a><br>Flash小游戏<a href="https://www.123865.com/s/DjgcVv-LG9Ad">下载</a><br>火狐浏览器<a href="https://kkgithub.com/wyxdlz54188/wyxdlz54188.github.io/releases/download/flashgame/Firefox-ESR-full-latest.exe">下载</a><br>麒麟970kernel<a href="https://github.com/xiaoleGun/kernel_huawei_kirin970/releases">下载</a><br>flash大全<a href="https://www.123865.com/s/DjgcVv-Rn9Ad">下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>提交博文的方法</title>
      <link href="/2025/02/14/2025_02_14_16_56_20/"/>
      <url>/2025/02/14/2025_02_14_16_56_20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><p>windows &lt;上网搜不掩饰了&gt;<br>mac 安装brew，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install nodejs npm</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>iOS在<code>App Store</code>内安装ish应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk add bash nodejs npm</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">apk upgrade</span><br></pre></td></tr></table></figure><p>安卓安装<a href="https://www.123865.com/s/DjgcVv-YJ9Ad">Termux</a>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg upgrade</span><br><span class="line">pkg install nodejs npm</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="2-创建博文"><a href="#2-创建博文" class="headerlink" title="2.创建博文"></a>2.创建博文</h2><p>在之前下的终端里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>再次输入<code>hexo new &#39;博文名称&#39;</code><br>创建博文</p><p>使用Markdown语法编写<code>/blog/source/_posts/博文名称.md</code>的文件</p><h2 id="3-私信李子上传博文"><a href="#3-私信李子上传博文" class="headerlink" title="3.私信李子上传博文"></a>3.私信李子上传博文</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>repo制作</title>
      <link href="/2025/01/28/2025_01_28_18_35/"/>
      <url>/2025/01/28/2025_01_28_18_35/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这里有一些付费的内容，需要付费才能阅读，请私信李子付费后获取密码。" data-whm="这里有一些付费的内容，需要付费才能阅读，请私信李子付费后获取密码。">  <script id="hbeData" type="hbeData" data-hmacdigest="82beab1b183acebc02ce5000a6480c0247844af9d35d5f52dbe95a8fb842d6c3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘿，bro。这里要输入密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>theos无根插件适配</title>
      <link href="/2025/01/25/2025_01_25_21_52/"/>
      <url>/2025/01/25/2025_01_25_21_52/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为了适配 Rootless 模式的 Theos 插件，你需要在<code>Makefile</code>中进行一些调整，以确保插件能够在无根越狱环境中正常运行。以下是适配 Rootless 模式的<code>Makefile</code>示例代码和说明：</p><p>适配 Rootless 模式的<code>Makefile</code>示例</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置 Rootless 模式</span></span><br><span class="line">ROOTLESS = 1</span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(ROOTLESS)</span>,1)</span><br><span class="line">THEOS_PACKAGE_SCHEME = rootless</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 根据是否启用 Rootless 模式设置目标系统版本</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(THEOS_PACKAGE_SCHEME)</span>, rootless)</span><br><span class="line">TARGET = iphone:clang:latest:15.0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">TARGET = iphone:clang:latest:12.0</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 包含 Theos 的通用配置</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(THEOS)</span>/makefiles/common.mk</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义插件名称和文件</span></span><br><span class="line">TWEAK_NAME = YourTweakName</span><br><span class="line">YourTweakName_FILES = Tweak.xm</span><br><span class="line">YourTweakName_CFLAGS = -fobjc-arc</span><br><span class="line">YourTweakName_LIBRARIES = substrate</span><br><span class="line">YourTweakName_FRAMEWORKS = UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置安装路径</span></span><br><span class="line">YourTweakName_INSTALL_PATH = /var/jb/usr/lib</span><br><span class="line"></span><br><span class="line"><span class="comment">## 包含 Theos 的插件构建规则</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(THEOS_MAKE_PATH)</span>/tweak.mk</span><br></pre></td></tr></table></figure><p>代码说明</p><ol><li>Rootless 模式判断：</li></ol><p>• 通过设置<code>ROOTLESS</code>变量来启用 Rootless 模式。</p><p>• 如果启用 Rootless 模式，则设置<code>THEOS_PACKAGE_SCHEME = rootless</code>。</p><ol start="2"><li>目标系统版本：</li></ol><p>• 根据是否启用 Rootless 模式，设置目标系统版本。例如，Rootless 模式下目标版本为 iOS 15.0。</p><ol start="3"><li>安装路径：</li></ol><p>• 在 Rootless 模式下，插件的安装路径通常为<code>/var/jb/usr/lib</code>。</p><ol start="4"><li>其他配置：</li></ol><p>• 包含 Theos 的通用配置文件和插件构建规则。</p><p>注意事项</p><p>• 路径适配：如果插件中涉及路径调用，确保路径适配 Rootless 环境。例如，<code>/var/jb/</code>是 Rootless 环境下的常用路径。</p><p>• 依赖库适配：确保依赖库路径正确，例如使用<code>@rpath</code>来链接动态库。</p><p>• 测试：在 Rootless 环境下测试插件，确保其功能正常。</p><p>通过以上配置，你的插件应该能够在 Rootless 模式下正常编译和运行。如果仍有问题，可以参考具体的错误日志进行分析。</p>]]></content>
      
      
      <categories>
          
          <category> iOS社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机友论坛</title>
      <link href="/2025/01/25/2025_01_25_19_01/"/>
      <url>/2025/01/25/2025_01_25_19_01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo gitalk 坑点</title>
      <link href="/2025/01/24/2025_01_24_22_26/"/>
      <url>/2025/01/24/2025_01_24_22_26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="gitalk坑点"><a href="#gitalk坑点" class="headerlink" title="gitalk坑点"></a>gitalk坑点</h3><h2 id="一-文件配置"><a href="#一-文件配置" class="headerlink" title="一.文件配置"></a>一.文件配置</h2><p>1.准备工作</p><p>• GitHub 账号：确保你有一个 GitHub 账号。</p><p>• GitHub 仓库：创建一个公共仓库用于存储评论。</p><p>• GitHub OAuth 应用：在 GitHub 的 Developer Settings 中创建一个 OAuth 应用。</p><p>• Application name：随意填写，例如“Gitalk Comments”。</p><p>• Homepage URL：填写你的博客首页 URL。</p><p>• Authorization callback URL：填写你的博客首页 URL。</p><p>• 完成注册后，记下生成的<code>Client ID</code>和<code>Client Secret</code>。</p><p>以上步骤即可完成 Gitalk 在 Butterfly 主题中的启用。如果遇到问题，请检查配置文件和代码是否正确，或者参考相关教程。</p><p>打开<code>yourblog/themes/butterfly(主题)/_config.yml</code>文件，搜索<code>comments</code>找到以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line">  # Leave it empty if you don&#x27;t need comments</span><br><span class="line">  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span><br><span class="line">  # Format of two comments system : Disqus,Waline</span><br><span class="line">  use: Gitalk,Valine  # use内输入Gitalk ，这里做演示Valine可不用</span><br><span class="line">  # Display the comment name next to the button</span><br><span class="line">  text: true # 按照李子的配置</span><br><span class="line">  # Lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line">  lazyload: true # 按照李子的配置</span><br><span class="line">  # Display comment count in post&#x27;s top_img</span><br><span class="line">  count: true # 按照李子的配置</span><br><span class="line">  # Display comment count in Home Page</span><br><span class="line">  card_post_count: false # 按照李子的配置</span><br></pre></td></tr></table></figure><p>  想必大家已经设置完毕了吧！<br>  继续搜索<code>Gitalk</code><br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  # Gitalk</span><br><span class="line"># https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  client_id: Ov23liCn3Ikp2ztozmsj # 每个人都有所不同，添github app 给的</span><br><span class="line">  client_secret: fa83990c50a9e1f9cd0d56e87f8a1058569684b5 # 没人有所不同，添github app给的</span><br><span class="line">  repo: hexopl # gittalk评论仓库 单独见一个仓库</span><br><span class="line">  owner: wyxdlz54188 # 所有者名称github</span><br><span class="line">  admin: wyxdlz54188 # 所有者名称github</span><br><span class="line">  language: zh-CN # 照李子改就是</span><br><span class="line">  perPage: 10 # Pagination size, with maximum 100.</span><br><span class="line">  distractionFreeMode: false # Facebook-like distraction free mode.</span><br><span class="line">  pagerDirection: last # Comment sorting direction, available values are last and first.</span><br><span class="line">  createIssueManually: false # Gitalk will create a corresponding github issue for your every single page automatically</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure></p><p>  以上没有特殊标记的都照改就是啦</p><h2 id="二、李子遇到的报错"><a href="#二、李子遇到的报错" class="headerlink" title="二、李子遇到的报错"></a>二、李子遇到的报错</h2><p>说句实在话按照其它的教程改来改去还是那两个报错没任什么问题，怎么办呢<br>很简单</p><p>开始以为是<code>OAuth Application</code>中我的路径写错了，后来发现没啥毛病。然后<code>使用了GitHub登录</code>了还是存在这个问题，我再到我的仓库里面去看，发现<code>在issues下</code>根本没有一条issue。按理来说<code>只要GitHub账号第一次登录了就会给当前文章初始化一个issue</code>，我突然想起了文章的<code>初始化权限问题</code>，<code>而且我GitHub账号有几个</code>，会不会是使用 没有仓库所有权限的账号 登录。然后，使用##所有者账号##登录，发现##能够评论##了，而且在仓库的issues中多了一条属于该文章的issue。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李子的服务器</title>
      <link href="/2025/01/09/2025_01_09_16_31/"/>
      <url>/2025/01/09/2025_01_09_16_31/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>哈喽大家好我是你们的老李子，今天给大家带来的是李芒果空岛服务器，服务器不大人不多欢迎大家加入！</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trollstore常用技巧</title>
      <link href="/2025/01/05/2025_01_05_14_00/"/>
      <url>/2025/01/05/2025_01_05_14_00/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="软件不可用"><a href="#软件不可用" class="headerlink" title="软件不可用"></a>软件不可用</h3><p>相比大家一定遇到过trollstore的软件不可用的情况吧?<br><img src="/img/Screenshot_20250105_215707_com.tencent.mm.png"></p><p>其实解决方法很简单<br>1.打开 torellstore或者永久性助手 注销一下即可</p>]]></content>
      
      
      <categories>
          
          <category> iOS社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS系统文件目录解析</title>
      <link href="/2025/01/05/2025_01_05_2_07/"/>
      <url>/2025/01/05/2025_01_05_2_07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、【&#x2F;Applications】 常用软件的安装目录</p><ol start="2"><li>【&#x2F;private &#x2F;var&#x2F; mobile&#x2F;Media &#x2F;iphone video Recorder】录像文件存放目录</li></ol><p>3、【&#x2F;private &#x2F;var&#x2F; mobile&#x2F;Media &#x2F;DCIM】相机拍摄的照片文件存放目录</p><p>4、【&#x2F;private&#x2F;var&#x2F; mobile &#x2F;Media&#x2F;iTunes_Control&#x2F;Music】iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。</p><p>5、【&#x2F;private &#x2F;var&#x2F;root&#x2F;Media&#x2F;EBooks】电子书存放目录</p><p>6、【&#x2F;Library&#x2F;Ringtones】系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到&#x2F;Library&#x2F;Ringtones即可）</p><p>7、【&#x2F;private&#x2F;var&#x2F; mobile &#x2F;Library&#x2F;AddressBook】系统电话本的存放目录。</p><p>8、【&#x2F;private &#x2F;var&#x2F; mobile&#x2F;Media &#x2F;iphone Recorder】录音文件存放目录</p><p>9、【&#x2F;Applications&#x2F;Preferences.app&#x2F;zh_CN.lproj】软件Preferences.app的中文汉化文件存放目录</p><p>10、【&#x2F;Library&#x2F;Wallpaper】系统墙纸的存放目录</p><p>11、【&#x2F;System&#x2F;Library&#x2F;Audio&#x2F;UISounds】系统声音文件的存放目录</p><p>12、【&#x2F;private&#x2F;var&#x2F;root&#x2F;Media&#x2F;PXL】上传安装程序建立的一个数据库</p><p>13、【&#x2F;bin】和linux系统差不多，是系统执行指令的存放目录。</p><p>14、【&#x2F;private&#x2F;var&#x2F; mobile &#x2F;Library&#x2F;SMS】系统短信的存放目录</p><p>15、【&#x2F;private&#x2F;var&#x2F;run】系统进程运行的临时目录（查看系统启动的所有进程）</p><p>16、【&#x2F;private&#x2F;var&#x2F;logs&#x2F;CrashReporter】系统错误记录报告、</p><ol start="17"><li>这个电池图标存放自用的主题目录下，&#x2F;var&#x2F;stash&#x2F;Themes.xxxxx&#x2F;自用主题目录&#x2F;Bundles&#x2F;com.apple.springboard&#x2F;目录内上传BatteryBG_1-17.png图片即可，如无com.apple.springboard目录，请自建。（Themes.xxxxx每个人都是不一样的，故用xxxxx表示）也可以直接替换&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app图标替换路径<br>WB相关主题直接放在Library&#x2F;Themes里面注意修改权限</li></ol><p>18、充电图标：System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;BatteryBG_1.png 一直到 BatteryBG_17.png ，Batteryfill.png</p><p>19、手机信号图标：&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;下Default_0_Bars.png一直到Default_5_Bars.png 和FSO_0_Bars.png–FSO_5_Bars.png</p><p>20、Wifi信号图标</p><p>:&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;Default_0_AirPort.png</p><p>Default_3_AirPort.png和FSO_0_AirPort.png—FSO_3_AirPort.png</p><p>21、Edge信号图标:&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F; Default_EDGE_ON.png和FSO_EDGE_ON.png 2图标为Edge信号图标</p><p>22、日期美化图标：&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app|FSO_LockIcon.png</p><p>23、待机播放器图标：&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app|nexttrack.png , pause.png , play.png, prevtrack.png 4个图标为待机播放器图标</p><p>24、IPOD播放信号 &#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;FSO_Play.png ,Default_Play.png</p><p>25、闹钟信号 &#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;Default_AlarmClock.png ,FSO_AlarmClock.png</p><p>26、震动图标</p><p>&#x2F;System&#x2F;Library&#x2F;&#x2F;CoreServices&#x2F;SpringBoard.app&#x2F;silent.png ,hud.png ,ring.png</p><p>27、滑块图标：</p><p>&#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;TelephonyUI.framework 目录下</p><p>Bottombarknobgray.png（待机解锁滑块图标）</p><p>bottombarknobgreen.png（待机状态下移动滑动来接听 滑块图标)</p><p>Bottombarknobred.png(关机滑块 图标）</p><p>28、待机时间字体：&#x2F;System&#x2F;Library&#x2F;Fonts&#x2F;Cache&#x2F;LockClock.ttf</p><p>29、待机时间背景：system&#x2F;library&#x2F;Frameworks&#x2F;UIKit.framework&#x2F;Other.artwork</p><p>30、滑块文字变为闪光字: &#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;TelephonyUI.framework&#x2F;bottombarlocktextmask.png</p><p>32、解锁滑条路径: &#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;TelephonyUI.framework&#x2F;&#x2F;topbarbkgnd.png ,bottombarbkgndlock.png</p><p>33、 修复系统菜单 删除文件&#x2F;private&#x2F;var&#x2F;mobile&#x2F;Library&#x2F;Caches&#x2F;com.apple.mobile.installation.plist，然后重新启动iPhone</p>]]></content>
      
      
      <categories>
          
          <category> iOS社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS中的两个bootstrap解析</title>
      <link href="/2025/01/04/2025_01_04_12_52/"/>
      <url>/2025/01/04/2025_01_04_12_52/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否为iOS中的bootstarp这一单词很是困惑?<br>不要担心李子这就来给大家解答。<br>bootstrap 译为引导<br>bootstarp 译为引导程序</p><p>而bootstarp并未在iOS的越狱史上被提及，但却有两个bootstrap???</p><p>是的确有此事。</p><h3 id="半越狱"><a href="#半越狱" class="headerlink" title="半越狱"></a>半越狱</h3><p>bootstrap作为iOS程序一名为roothide bootstrap&#x2F;<em><strong>隐藏型半越狱</strong></em>引导程序(即:半越狱)，虽说这roothide bootstrap名字是我起的但也并无道理<br>1.这个越狱程序的作者名为roothide[很明显别有用意]<br>2.这个越狱根目录与传统<em><strong>引导式</strong></em>无根越狱不同藏在应用安装目录，且每次越狱时的目录名字也不同。符合roothide这位作者的网名</p><h3 id="引导式-无根越狱-这nm是不是李子你搞错了"><a href="#引导式-无根越狱-这nm是不是李子你搞错了" class="headerlink" title="引导式? 无根越狱??? 这nm是不是李子你搞错了?"></a>引导式? 无根越狱??? 这nm是不是李子你搞错了?</h3><p>不不不，在所有无根越狱程序作者的推文中都有名叫<em><strong>无绳引导式越狱</strong></em>。额这就是无根越狱单词的机翻，但你有没有发现相同之处? 很明显机翻把bootstrap的意思也翻译进去了。<br>即:在所有移动越狱程序的ipa解包后可以发现都有一个名叫bootstrap.tar.zst的文件，那这个文件可以译为<em><strong>越狱引导文件</strong></em>，bootstrap也代指<em><strong>此文件</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> iOS社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Theos的安装及theosinstaller使用教程</title>
      <link href="/2025/01/04/2025_01_04_11_07/"/>
      <url>/2025/01/04/2025_01_04_11_07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>准备工具：<br>一台可以使用(巨魔&#x2F;越狱)的🍎苹果设备&amp;&amp;越狱最好,巨魔可越狱者尽量越狱,不可越狱者安装bootstarp最新版本</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>那么想必大家已经准备好了吧！<br>打开sileo越狱商店添加插件源<br>添加李子源到<a href="sileo://source/https://wyxdlz54188.github.io/repo/">sileo</a><br>李子源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wyxdlz54188.github.io/repo/</span><br></pre></td></tr></table></figure><p>1.打开插件源安装theos依赖及theosinstaller<br>2.安装<em><strong>Newterm3</strong></em><br>无根越狱者用插件源里的插件半越狱&#x2F;roothide隐根 者安装roothide源的Newterm3插件<br><a href="https://wyxdlz54188.github.io/repo/debs/theosinstaller.deb">theosinstaller下载</a><br><a href="https://wyxdlz54188.github.io/repo/debs/ws.hbang.newterm3_3.0_iphoneos-arm64.deb">Newterm3无根专用</a><br><a href="https://wyxdlz54188.github.io/repo/debs/lizi.newterm.cn_1.0_iphoneos-arm64.deb">Newterm3汉化</a><br>3.打开Newterm3输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh theosinstaller.sh</span><br></pre></td></tr></table></figure><p>即可自动安装开发Theos环境，安装过程中会卡住请耐心等待15~20分钟后退出应用后台重新打开即可安装成功</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>1.打开Newterm3输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$THEOS</span>/usr/bin/nic.pl</span><br></pre></td></tr></table></figure><p>如显示(1) (2) (3)的选项即安装成功,反之filza打开越狱目录找到tmp文件夹,搜索sdks打开iPhoneossdks的目录,复制里面的sdk到越狱目录&#x2F;Users&#x2F;theos&#x2F;sdks文件夹内</p><p>打赏一下李子呗<br><img src="/img/wechat.png" width="50%"></p>]]></content>
      
      
      <categories>
          
          <category> iOS社区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Theos开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于李子</title>
      <link href="/2025/01/04/2025_01_04_10_49/"/>
      <url>/2025/01/04/2025_01_04_10_49/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>终于有人找到李子了想必是想来联系李子的吧</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>李子的<a href="https://github.com/wyxdlz54188">Github</a></p><h2 id="🔥🔥🔥插件源🔥🔥🔥"><a href="#🔥🔥🔥插件源🔥🔥🔥" class="headerlink" title="🔥🔥🔥插件源🔥🔥🔥"></a>🔥🔥🔥插件源🔥🔥🔥</h2><p>漏洞不止，越狱不尽。<br>李子源摘李，乐趣无极限。<br>[李子源]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lizirepo.us.kg/</span><br></pre></td></tr></table></figure><h2 id="BiliBili"><a href="#BiliBili" class="headerlink" title="BiliBili"></a>BiliBili</h2><p><a href="https://space.bilibili.com/1438193585?plat_id=1&share_from=space&share_medium=android&share_plat=android&share_session_id=cc2e39e0-1213-4dc3-b41b-046fbb75a294&share_source=COPY&share_tag=s_i&timestamp=1734695187&unique_k=VSjWzos">玩科技的李子</a> 新<br><a href="https://space.bilibili.com/1189124330?plat_id=1&share_from=space&share_medium=iphone&share_plat=ios&share_session_id=119E1A47-4D84-4229-B93D-67A06F159629&share_source=COPY&share_tag=s_i&spmid=main.space.0.0&timestamp=1734610189&unique_k=7O29nTF">玩游戏的李子-</a> 旧已死</p>]]></content>
      
      
      <categories>
          
          <category> 关于 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的使用Github Action服务来将Hexo部署到Github Pages</title>
      <link href="/2024/06/19/2024_06_19_12_31/"/>
      <url>/2024/06/19/2024_06_19_12_31/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程由<a href="https://b23.tv/WtUtLta">木子dn</a>提供李子翻版</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.bilibili.com/video/BV1xTgTemEDU">Bilibili视频教程-9分钟零成本搭建自动化部署个人博客(Hexo + Github Action + Page)</a><BR/><br><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a><BR/><br><a href="https://cloud.tencent.com/developer/article/2201648">利用 GitHub Action 自动部署 Hexo 博客</a><BR/><br><a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/icarus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/#install-npm">Hexo主题-Icarus快速上手</a></p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>当前PC环境中有Node和Git。版本可以参考Hexo文档。</p><p>文章中出现的yourusername为Github用户名，your-repo为仓库名。</p><h1 id="1-初始化Hexo"><a href="#1-初始化Hexo" class="headerlink" title="1. 初始化Hexo"></a>1. 初始化Hexo</h1><p>安装脚手架，初始化hexo，这会新建blog文件夹，进入后安装依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="2-初始化仓库"><a href="#2-初始化仓库" class="headerlink" title="2. 初始化仓库"></a>2. 初始化仓库</h1><p>可以选择利用VSCode等软件直接对项目开源到github仓库。</p><p>也可以手动去github创建一个空仓库，然后手动在命令行中推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/yourusername/your-repo.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h1 id="3-创建Token"><a href="#3-创建Token" class="headerlink" title="3. 创建Token"></a>3. 创建Token</h1><p>在个人设置中新增一个Personal access tokens。至少要包含repo权限，然后记住token。<br>这个token是给Github Action用的，Github Action会把Hexo编译部署到gh-pages分支。<br><img src="/2024_06_19_12_31/image1.png" class="fancybox"></p><p>随后在存放Hexo代码的仓库里把这个Token新增进去，名称为GH_TOKEN(随意，后面需要一致)。<br><img src="/2024_06_19_12_31/image2.png" class="fancybox"></p><h1 id="4-修改-config-yml"><a href="#4-修改-config-yml" class="headerlink" title="4. 修改_config.yml"></a>4. 修改_config.yml</h1><p>在_config.yml中修改deploy字段。指示Hexo在deploy时的推送地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourusername/your-repo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><h1 id="5-配置Github-Action工作流"><a href="#5-配置Github-Action工作流" class="headerlink" title="5. 配置Github Action工作流"></a>5. 配置Github Action工作流</h1><p>在<code>.github</code>文件夹下新增<code>workflows</code>文件夹，然后新增<code>deploy.yml</code>文件，内容如下。</p><p>里面有个node-version要和你本地的node一致。<br/><br>步骤大致意思就是使用ubuntu-latest作为基础环境，然后安装各种依赖，随后hexo generate生成博客网站静态文件夹，<br>把这个文件夹推送到同一仓库的gh-pages分支。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># 当推送到 main 分支时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">false</span>  <span class="comment"># 禁用子模块检查</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span> <span class="string">Git</span> <span class="string">Deployer</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span> <span class="string">and</span> <span class="string">Generate</span> <span class="string">Static</span> <span class="string">Files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Git</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;github-actions[bot]&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;github-actions[bot]@users.noreply.github.com&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd public/</span></span><br><span class="line"><span class="string">          git init</span></span><br><span class="line"><span class="string">          git add -A</span></span><br><span class="line"><span class="string">          git commit -m &quot;Create by workflows&quot;</span></span><br><span class="line"><span class="string">          git remote add origin https://$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/yourusername/your-repo.git</span></span><br><span class="line"><span class="string">          git push origin HEAD:gh-pages -f</span></span><br></pre></td></tr></table></figure><h1 id="6-推送验证"><a href="#6-推送验证" class="headerlink" title="6. 推送验证"></a>6. 推送验证</h1><p>把刚才更新的所有文件都推送一遍，github就会触发工作流，然后去网站看工作流运转的如何。<br>等一切运转完毕，就会发现仓库多出一个gh-pages分支。</p><h1 id="7-配置Github-Pages"><a href="#7-配置Github-Pages" class="headerlink" title="7. 配置Github Pages"></a>7. 配置Github Pages</h1><p>在仓库settings中配置page来源为gh-pages分支即可。等待网站部署完毕，就可以看了。网站链接可以在settings的GitHub Pages看到，也可以去action里看到。<br><img src="/2024_06_19_12_31/image3.png" class="fancybox"></p><h1 id="8-修改Hexo主题样式"><a href="#8-修改Hexo主题样式" class="headerlink" title="8. 修改Hexo主题样式"></a>8. 修改Hexo主题样式</h1><p>以一个比较热门的主题为演示示例，参考地址<a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a>。</p><p>若要使用NPM将Icarus安装为Node包，在你的Hexo站点根目录运行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S hexo-theme-icarus hexo-renderer-inferno</span><br></pre></td></tr></table></figure><p>接下来，使用hexo命令修改主题为Icarus:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo config theme icarus</span><br></pre></td></tr></table></figure><p>会发现多出一个<code>_config.icarus.yml</code>文件。这是Icarus主题的配置文件。</p><p>最后推送到仓库，等待部署后，就可以了。</p><h1 id="10-添加文章"><a href="#10-添加文章" class="headerlink" title="10. 添加文章"></a>10. 添加文章</h1><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p><p>文章添加编辑后，现在只需要推送到仓库，那么github不仅会保存你的Hexo个人博客源码，还会自动更新个人博客静态页面到gh-pages，由此触发github-page功能来更新你的个人博客网站。</p><h1 id="遇到了一些问题和方案"><a href="#遇到了一些问题和方案" class="headerlink" title="遇到了一些问题和方案"></a>遇到了一些问题和方案</h1><h2 id="1-网站没有样式问题"><a href="#1-网站没有样式问题" class="headerlink" title="1. 网站没有样式问题"></a>1. 网站没有样式问题</h2><p>在网站打开F12，发现css等样式资源无法加载，仔细查看报错原因和请求地址，发现并不是当前仓库。</p><p>缺少仓库地址，所以把请求地址复制一份，并在后面添加上仓库名即可，这需要修改_config.yml中修改url字段。yourusername似乎为小写。</p><p>推送后等待工作流执行，查看结果。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://yourusername.github.io/your-repo</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/your-repo/</span></span><br></pre></td></tr></table></figure><h2 id="2-图片不显示"><a href="#2-图片不显示" class="headerlink" title="2. 图片不显示"></a>2. 图片不显示</h2><p>在_config.yml中设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>意思是每个md博文会单独配套一个同名文件夹，用来存放图片。形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── my-new-post.md</span><br><span class="line">└── my-new-post/</span><br><span class="line">    └── example.jpg</span><br></pre></td></tr></table></figure><p>hexo提供三种语法</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>那么在md中可以这样引用图片</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>这样一来，部署的时候图片就不会不显示了，但是有个新的问题，<br>我在本地编辑md的时候无法预览图片怎么办。</p><p>建议用VSCode下载插件<code>vscode-hexo</code>和<code>Hexo Utils</code>，随后在左边栏目就可以看到新Hexo Utils的新菜单，只要你的VSCode当前打开的文件夹是hexo的根目录，那么插件就会自动识别到，当你对md文件使用“侧边预览”时，图片就正常显示了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buildroot 打包 rootfs</title>
      <link href="/2023/11/16/Cvitek-buildroot/"/>
      <url>/2023/11/16/Cvitek-buildroot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cvitek-buildroot-打包-rootfs-流程介绍"><a href="#Cvitek-buildroot-打包-rootfs-流程介绍" class="headerlink" title="Cvitek buildroot 打包 rootfs 流程介绍"></a>Cvitek buildroot 打包 rootfs 流程介绍</h2><blockquote><p>基于 <a href="https://github.com/sophgo/cvi_mmf_sdk/tree/v4.1.0">https://github.com/sophgo/cvi_mmf_sdk&#x2F;tree&#x2F;v4.1.0</a> 的实现。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 <a href="https://github.com/sophgo/cvi_mmf_sdk">cvi_mmf_sdk</a> 中，支持两种生成 rootfs 的方式：</p><ul><li>基于 ramdisk 目录下的文件系统。</li><li>基于 buildroot 打包生成文件系统。</li></ul><p>前者仅保留了常用的一些工具，因此生成的文件系统较小，不过新增工具比较麻烦。后者方便用户自己控制需要打包哪些工具。</p><p><strong>默认使用第一种方式来生成文件系统</strong>，可通过在板子的配置文件中加上 <code>CONFIG_BUILDROOT_FS=y</code> （如 <a href="https://github.com/sophgo/cvi_mmf_sdk/blob/v4.1.0/build/boards/cv181x/cv1812cp_sophpi_duo_sd/cv1812cp_sophpi_duo_sd_defconfig#L30">cv1812cp_sophpi_duo_sd_defconfig#L30</a> 中的例子），以启用 <code>buildroot</code> 来生成文件系统。</p><h2 id="rootfs-打包流程说明"><a href="#rootfs-打包流程说明" class="headerlink" title="rootfs 打包流程说明"></a>rootfs 打包流程说明</h2><p>在 <code>source cvisetup.sh</code> 之后，就可以使用 <code>pack_rootfs</code> 命令来打包文件系统了。它本质上是定义在 <a href="https://github.com/sophgo/cvi_mmf_sdk/blob/v4.1.0/build/common_functions.sh#L107">common_functions.sh</a> 中的一个 shell 函数，在设置必要的环境变量后，通过 <code>make rootfs</code> 完成打包的相关处理。主要有3个步骤：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">rootfs-prepare:</span></span><br><span class="line"><span class="comment"># 这里将所需要的打包文件都复制到 $(OUTPUT_DIR)/rootfs 这个目录中</span></span><br><span class="line"></span><br><span class="line"><span class="section">rootfs-pack:rootfs-prepare</span></span><br><span class="line"><span class="section">rootfs-pack:</span></span><br><span class="line"><span class="comment"># 完成一些清理工作，去掉无用的文件或者 strip ko文件等</span></span><br><span class="line"><span class="comment"># 制作文件系统</span></span><br><span class="line"></span><br><span class="line"><span class="section">rootfs:rootfs-pack</span></span><br><span class="line"><span class="section">rootfs:</span></span><br><span class="line"><span class="comment"># 文件系统在 rootfs-pack 中已制作完成，</span></span><br><span class="line"><span class="comment"># 这里仅对该文件再进行封装一个指定的 Header，烧录到 flash 时会检查该 Header。</span></span><br><span class="line"><span class="comment"># 若无Header，或Header信息不正确，就会跳过该文件的烧录。Header本身并不会烧录到 flash。</span></span><br><span class="line"><span class="comment"># 如果是 SD 卡启动的方式，则不需要封装。</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(STORAGE_TYPE)</span>, sd)</span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> raw2cimg ,rootfs.<span class="variable">$(STORAGE_TYPE)</span>)</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>上面是基于 <code>ramdisk</code> 目录制作文件系统的流程，基于 <code>buildroot</code> 的流程也是类似的：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">br-rootfs-prepare:</span></span><br><span class="line"><span class="comment"># 将必要的文件复制到 buildroot 目录下的 overlay 中，</span></span><br><span class="line"><span class="comment"># buildroot 制作文件系统时会将该目录下的文件也包含进去。</span></span><br><span class="line"></span><br><span class="line"><span class="section">br-rootfs-pack:</span></span><br><span class="line"><span class="comment"># 制作 ext4 的文件系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Makefile 中，会检查 CONFIG_BUILDROOT_FS 配置是否启用</span></span><br><span class="line"><span class="comment"># 若启用了，则通过 br-rootfs-pack 调用 buildroot 来制作文件系统。</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(CONFIG_BUILDROOT_FS)</span>,y)</span><br><span class="line"><span class="section">rootfs:br-rootfs-prepare</span></span><br><span class="line"><span class="section">rootfs:br-rootfs-pack</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="section">rootfs:rootfs-pack</span></span><br><span class="line"><span class="section">rootfs:</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> print_target)</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(STORAGE_TYPE)</span>, sd)</span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> raw2cimg ,rootfs.<span class="variable">$(STORAGE_TYPE)</span>)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>有了基本流程的概念后，下面展开分析基于 <code>buildroot</code> 制作文件系统的流程。</p><h3 id="br-rootfs-prepare"><a href="#br-rootfs-prepare" class="headerlink" title="br-rootfs-prepare"></a>br-rootfs-prepare</h3><p><code>br-rootfs-prepare</code> 的主要工作是将需要打包到文件系统中的文件复制到指定的目录下，以便 buildroot 在制作文件系统时，能将这些文件一同打包。一般这些文件包括：</p><ul><li><code>build_kernel</code> 得到的 <code>.ko</code> 文件；</li><li><code>build_middleware</code> 得到的动态库文件；</li><li>存放在 <code>middlleware</code> 中以 <code>ko</code> 或 <code>so</code> 形式发布的一些模块，如：<a href="https://github.com/sophgo/cvi_mmf_sdk/tree/v4.1.0/middleware/v2/cv180x/ko">middleware&#x2F;v2&#x2F;cv180x&#x2F;ko</a>。</li></ul><p>在 <code>cvisetup.sh</code> 中将需要的路径导出为环境变量，主要有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buildroot 仓库所在路径</span></span><br><span class="line"><span class="built_in">export</span> BR_DIR=<span class="string">&quot;<span class="variable">$TOP_DIR</span>&quot;</span>/buildroot-2021.05</span><br><span class="line"></span><br><span class="line"><span class="comment"># overlay 路径，用于存储需要打包到文件系统中的文件</span></span><br><span class="line"><span class="built_in">export</span> BR_OVERLAY_DIR=<span class="variable">$&#123;BR_DIR&#125;</span>/board/cvitek/<span class="variable">$&#123;CHIP_ARCH&#125;</span>/overlay</span><br><span class="line"></span><br><span class="line"><span class="comment"># buildroot 的配置文件名称，即：</span></span><br><span class="line"><span class="comment"># cvitek_CV180X_musl_riscv64_defconfig  cvitek_CV181X_musl_riscv64_defconfig</span></span><br><span class="line"><span class="built_in">export</span> BR_BOARD=cvitek_<span class="variable">$&#123;CHIP_ARCH&#125;</span>_<span class="variable">$&#123;SDK_VER&#125;</span></span><br><span class="line"><span class="built_in">export</span> BR_DEFCONFIG=<span class="variable">$&#123;BR_BOARD&#125;</span>_defconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># buildroot 生成的文件系统的保存路径</span></span><br><span class="line"><span class="built_in">export</span> BR_ROOTFS_DIR=<span class="string">&quot;<span class="variable">$OUTPUT_DIR</span>&quot;</span>/tmp-rootfs</span><br></pre></td></tr></table></figure><p>上述环境变量定义了文件复制的目标位置，在 <code>br-rootfs-prepare</code> 只进行复制即可！</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">br-rootfs-prepare:</span></span><br><span class="line"><span class="comment"># 复制 ko 以及相关 lib 到 buildroot 相关路径</span></span><br><span class="line">$&#123;Q&#125;mkdir -p <span class="variable">$(BR_OVERLAY_DIR)</span>/mnt/system</span><br><span class="line">$&#123;Q&#125;cp -arf $&#123;SYSTEM_OUT_DIR&#125;/* <span class="variable">$(BR_OVERLAY_DIR)</span>/mnt/system/</span><br><span class="line"><span class="comment"># 对 ko 以及相关动态库 进行 strip，以缩小文件系统大小</span></span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -name <span class="string">&quot;*.ko&quot;</span> -type f -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_KERNEL)</span>strip --strip-unneeded &#123;&#125; \;</span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -name <span class="string">&quot;*.so*&quot;</span> -type f -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_KERNEL)</span>strip --strip-all &#123;&#125; \;</span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -executable -type f ! -name <span class="string">&quot;*.sh&quot;</span> ! -path <span class="string">&quot;*etc*&quot;</span> ! -path <span class="string">&quot;*.ko&quot;</span> -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_SDK)</span>strip --strip-all &#123;&#125; 2&gt;/dev/null \;</span><br></pre></td></tr></table></figure><h3 id="br-rootfs-pack"><a href="#br-rootfs-pack" class="headerlink" title="br-rootfs-pack"></a>br-rootfs-pack</h3><p><code>br-rootfs-pack</code> 的主要工作是指定 buildroot 的配置文件，完成 buildroot 的编译工作，以得到需要的文件系统。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">br-rootfs-pack:export TARGET_OUTPUT_DIR=<span class="variable">$(BR_DIR)</span>/output/<span class="variable">$(BR_BOARD)</span></span></span><br><span class="line"><span class="section">br-rootfs-pack:</span></span><br><span class="line"><span class="comment"># 指定配置文件 和 编译工具链路径</span></span><br><span class="line">$&#123;Q&#125;<span class="variable">$(MAKE)</span> -C <span class="variable">$(BR_DIR)</span> <span class="variable">$(BR_DEFCONFIG)</span> BR2_TOOLCHAIN_EXTERNAL_PATH=<span class="variable">$(CROSS_COMPILE_PATH)</span></span><br><span class="line"><span class="comment"># 编译得到文件系统，位于 $(TARGET_OUTPUT_DIR)/images/rootfs.ext4</span></span><br><span class="line">$&#123;Q&#125;<span class="variable">$(MAKE)</span> -j$&#123;NPROC&#125; -C <span class="variable">$(BR_DIR)</span></span><br><span class="line"><span class="comment"># $&#123;Q&#125;rm -rf $(BR_ROOTFS_DIR)/*</span></span><br><span class="line"><span class="comment"># 将文件系统从 buildroot 路径，复制到 SDK 统一的输出路径 $(OUTPUT_DIR)</span></span><br><span class="line"> $&#123;Q&#125;cp <span class="variable">$(TARGET_OUTPUT_DIR)</span>/images/rootfs.ext4 <span class="variable">$(OUTPUT_DIR)</span>/rawimages/rootfs_ext4.<span class="variable">$(STORAGE_TYPE)</span></span><br><span class="line"> <span class="comment"># 封装 Header，这是烧录到 flash 的必要步骤</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> raw2cimg ,rootfs_ext4.<span class="variable">$(STORAGE_TYPE)</span>)</span></span><br></pre></td></tr></table></figure><p>至此，就得到了 buildroot 编译的文件系统，不过需要注意的是：<strong>该文件系统中仅包含了 <code>ko</code> 和 动态库，ramdisk 中的一些开机自动运行的脚本并未包含进文件系统中，因此没有自动加载 ko 等流程</strong></p><h2 id="buildroot-配置文件说明"><a href="#buildroot-配置文件说明" class="headerlink" title="buildroot 配置文件说明"></a>buildroot 配置文件说明</h2><p>目前 <code>buildroot/configs</code> 目录下提供了 <code>cv180x, cv181x</code> 的基础配置文件，用户可在该配置文件的基础上进行修改，部分参数与上面介绍的编译流程或编译工具链有关，不可随意更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 工具链相关的配置。</span></span><br><span class="line">BR2_TOOLCHAIN_*</span><br><span class="line">BR2_TOOLCHAIN_EXTERNAL_PREFIX=<span class="string">&quot;riscv64-unknown-linux-musl&quot;</span></span><br><span class="line">BR2_TARGET_LDFLAGS=<span class="string">&quot;-mcpu=c906fdv -march=rv64imafdcv0p7xthead -mcmodel=medany -mabi=lp64d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. overlay 路径</span></span><br><span class="line">BR2_ROOTFS_OVERLAY=<span class="string">&quot;board/cvitek/CV181X/overlay&quot;</span></span><br></pre></td></tr></table></figure><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国内镜像</span></span><br><span class="line">BR2_BACKUP_SITE=<span class="string">&quot;http://sources.buildroot.net&quot;</span></span><br><span class="line">BR2_KERNEL_MIRROR=<span class="string">&quot;https://mirrors.aliyun.com/linux-kernel&quot;</span></span><br><span class="line">BR2_GNU_MIRROR=<span class="string">&quot;https://mirrors.aliyun.com/gnu&quot;</span></span><br><span class="line">BR2_LUAROCKS_MIRROR=<span class="string">&quot;https://luarocks.cn&quot;</span></span><br><span class="line">BR2_CPAN_MIRROR=<span class="string">&quot;https://mirrors.aliyun.com/CPAN&quot;</span></span><br></pre></td></tr></table></figure><p>有些仓库设置上面的代理也没用😑，就需要<strong>手动下载后，放到 <code>buildroot-2021.05/dl</code> 对应模块的文件夹下</strong>。</p><h3 id="打包-public-工具问题"><a href="#打包-public-工具问题" class="headerlink" title="打包 public 工具问题"></a>打包 public 工具问题</h3><p>在使用 ramdisk 方式打包文件系统时，有从好几个地方复制文件。一般来说，既然选择用 buildroot 了，一些三方工具都直接用 buildroot 编译的就好，不需要拷贝。<strong>不过像 S11defer_init 这个文件，又必须从 ramdisk 拷贝。</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 ramdisk/rootfs/public 下拷贝选中的工具</span></span><br><span class="line"><span class="keyword">define</span> TARGET_PACKAGE_INSTALL_CMD</span><br><span class="line">@echo &#x27;TARGET PACKAGE OUTPUT DIR=<span class="variable">$(OUTPUT_DIR)</span>/rootfs&#x27;;\</span><br><span class="line"><span class="variable">$(<span class="built_in">foreach</span> t,<span class="variable">$(TARGET_PACKAGES)</span>,\</span></span><br><span class="line"><span class="variable">$&#123;Q&#125;cd <span class="variable">$(TOP_DIR)</span>/ramdisk/rootfs/public/<span class="variable">$(t)</span>/<span class="variable">$(packages_arch)</span>/ &amp;&amp; \</span></span><br><span class="line"><span class="variable">$&#123;Q&#125;find . \( ! -type d ! -name <span class="string">&quot;*.a&quot;</span> ! -path <span class="string">&quot;*include*&quot;</span> ! -name <span class="string">&quot;.gitkeep&quot;</span> \)</span> \</span><br><span class="line">-printf &#x27;Copy Package file <span class="variable">$(TOP_DIR)</span>/ramdisk/rootfs/public/<span class="variable">$(t)</span>/<span class="variable">$(packages_arch)</span>/%p\n&#x27; \</span><br><span class="line">-exec cp -a --remove-destination --parents &#x27;&#123;&#125;&#x27; <span class="variable">$(OUTPUT_DIR)</span>/rootfs/ \; ; )</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="section">rootfs-prepare:<span class="variable">$(OUTPUT_DIR)</span>/rootfs</span></span><br><span class="line"><span class="comment"># Copy rootfs</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(CONFIG_FASTBOOT)</span>,y)</span><br><span class="line">$&#123;Q&#125;cp -a --remove-destination <span class="variable">$(RAMDISK_PATH)</span>/rootfs/<span class="variable">$(ROOTFS_BASE)</span>_shrink/* <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">$&#123;Q&#125;cp -a --remove-destination <span class="variable">$(RAMDISK_PATH)</span>/rootfs/<span class="variable">$(ROOTFS_BASE)</span>/* <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy arch overlay rootfs</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="string">&quot;$(wildcard <span class="variable">$(SDK_VER_FOLDER_PATH)</span>)&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">$&#123;Q&#125;cp -r <span class="variable">$(SDK_VER_FOLDER_PATH)</span>/* <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy chip overlay rootfs</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="string">&quot;$(wildcard <span class="variable">$(CHIP_FOLDER_PATH)</span>)&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">$&#123;Q&#125;cp -r <span class="variable">$(CHIP_FOLDER_PATH)</span>/* <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy project overlay rootfs</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="string">&quot;$(wildcard <span class="variable">$(CUST_FOLDER_PATH)</span>)&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">$&#123;Q&#125;cp -r <span class="variable">$(CUST_FOLDER_PATH)</span>/* <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包 menuconfig 中配置的一些三方工具。比如 ntp/dropbear/python3 等</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> TARGET_PACKAGE_INSTALL_CMD)</span></span><br><span class="line"><span class="comment"># 设置其他</span></span><br><span class="line">$&#123;Q&#125;$&#123;BUILD_PATH&#125;/boards/default/rootfs_script/prepare_rootfs.sh <span class="variable">$(OUTPUT_DIR)</span>/rootfs</span><br><span class="line"><span class="comment"># Generate S10_automount</span></span><br><span class="line">$&#123;Q&#125;python3 <span class="variable">$(COMMON_TOOLS_PATH)</span>/image_tool/create_automount.py <span class="variable">$(FLASH_PARTITION_XML)</span> <span class="variable">$(OUTPUT_DIR)</span>/rootfs/etc/init.d/</span><br><span class="line"><span class="comment"># Generate /etc/fw_env.config</span></span><br><span class="line">$&#123;Q&#125;python3 <span class="variable">$(COMMON_TOOLS_PATH)</span>/image_tool/mkcvipart.py <span class="variable">$(FLASH_PARTITION_XML)</span> <span class="variable">$(OUTPUT_DIR)</span>/rootfs/etc/ --fw_env</span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(CONFIG_FASTBOOT)</span>,y)</span><br><span class="line">if [ -f <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/fastboot ]; then $&#123;Q&#125;rm -rf <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/fastboot ; fi ;</span><br><span class="line">if [ -f <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/S11defer_init ]; then $&#123;Q&#125;rm -rf <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/S11defer_init; fi ;</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>上面从几个路径拷了文件，在使用 buildroot 时，可以选择只从 Project 路径拷贝。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CUST_FOLDER_NAME = cv1813ha_wevb_0007a_emmc</span><br><span class="line">CHIP_FOLDER_PATH = /data/song.yu/youdao2/v4.2.0-intl/ramdisk/rootfs/overlay/cv1813ha</span><br><span class="line">SDK_VER_FOLDER_PATH = /data/song.yu/youdao2/v4.2.0-intl/ramdisk/rootfs/overlay/cv181x_32bit</span><br><span class="line">CUST_FOLDER_PATH = /data/song.yu/youdao2/v4.2.0-intl/ramdisk/rootfs/overlay/cv1813ha_wevb_0007a_emmc</span><br></pre></td></tr></table></figure><p>将必需的文件放在 <code>ramdisk/rootfs/overlay/cv1813ha_wevb_0007a_emmc</code> 目录下就行。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">br-rootfs-prepare:</span></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> print_target)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy project overlay rootfs, like ramdisk/rootfs/overlay/cv1813ha_wevb_0007a_emmc</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="string">&quot;$(wildcard <span class="variable">$(CUST_FOLDER_PATH)</span>)&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">$&#123;Q&#125;cp -r <span class="variable">$(CUST_FOLDER_PATH)</span>/* <span class="variable">$(BR_OVERLAY_DIR)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate /etc/inid.d/S10automount</span></span><br><span class="line">$&#123;Q&#125;python3 <span class="variable">$(COMMON_TOOLS_PATH)</span>/image_tool/create_automount.py <span class="variable">$(FLASH_PARTITION_XML)</span> <span class="variable">$(BR_OVERLAY_DIR)</span>/etc/init.d/</span><br><span class="line"><span class="comment"># Generate /etc/fw_env.config</span></span><br><span class="line">$&#123;Q&#125;python3 <span class="variable">$(COMMON_TOOLS_PATH)</span>/image_tool/mkcvipart.py <span class="variable">$(FLASH_PARTITION_XML)</span> <span class="variable">$(BR_OVERLAY_DIR)</span>/etc/ --fw_env</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(CONFIG_FASTBOOT)</span>,y)</span><br><span class="line">if [ -f <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/fastboot ]; then $&#123;Q&#125;rm -rf <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/fastboot ; fi ;</span><br><span class="line">if [ -f <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/S11defer_init ]; then $&#123;Q&#125;rm -rf <span class="variable">$(ROOTFS_DIR)</span>/etc/init.d/S11defer_init; fi ;</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy ko and mmf libs</span></span><br><span class="line">$&#123;Q&#125;mkdir -p <span class="variable">$(BR_OVERLAY_DIR)</span>/mnt/system</span><br><span class="line">$&#123;Q&#125;cp -arf $&#123;SYSTEM_OUT_DIR&#125;/* <span class="variable">$(BR_OVERLAY_DIR)</span>/mnt/system/</span><br><span class="line"><span class="comment"># strip</span></span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -name <span class="string">&quot;*.ko&quot;</span> -type f -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_KERNEL)</span>strip --strip-unneeded &#123;&#125; \;</span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -name <span class="string">&quot;*.so*&quot;</span> -type f -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_KERNEL)</span>strip --strip-all &#123;&#125; \;</span><br><span class="line">$&#123;Q&#125;find <span class="variable">$(BR_OVERLAY_DIR)</span> -executable -type f ! -name <span class="string">&quot;*.sh&quot;</span> ! -path <span class="string">&quot;*etc*&quot;</span> ! -path <span class="string">&quot;*.ko&quot;</span> -printf &#x27;striping %p\n&#x27; -exec <span class="variable">$(CROSS_COMPILE_SDK)</span>strip --strip-all &#123;&#125; 2&gt;/dev/null \;</span><br></pre></td></tr></table></figure><p>如果非要 rootfs&#x2F;public 下的工具，也在加上这个，不建议！还是直接修改 buildroot 配置更好。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> TARGET_PACKAGE_INSTALL_CMD_BR</span><br><span class="line">@echo &#x27;TARGET PACKAGE OUTPUT DIR=<span class="variable">$(BR_OVERLAY_DIR)</span>&#x27;;\</span><br><span class="line"><span class="variable">$(<span class="built_in">foreach</span> t,<span class="variable">$(TARGET_PACKAGES)</span>,\</span></span><br><span class="line"><span class="variable">$&#123;Q&#125;cd <span class="variable">$(TOP_DIR)</span>/ramdisk/rootfs/public/<span class="variable">$(t)</span>/<span class="variable">$(packages_arch)</span>/ &amp;&amp; \</span></span><br><span class="line"><span class="variable">$&#123;Q&#125;find . \( ! -type d ! -name <span class="string">&quot;*.a&quot;</span> ! -path <span class="string">&quot;*include*&quot;</span> ! -name <span class="string">&quot;.gitkeep&quot;</span> \)</span> \</span><br><span class="line">-printf &#x27;Copy Package file <span class="variable">$(TOP_DIR)</span>/ramdisk/rootfs/public/<span class="variable">$(t)</span>/<span class="variable">$(packages_arch)</span>/%p\n&#x27; \</span><br><span class="line">-exec cp -a --remove-destination --parents &#x27;&#123;&#125;&#x27; <span class="variable">$(BR_OVERLAY_DIR)</span>/ \; ; )</span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>❗❗注意：buildroot 目录下的 output&#x2F;xxx 中的文件，并不会自动删除。也就是说，overlay中第一次添加了某个文件，后面不需要这个文件了，仅从overlay目录删除还不够，必须从 output&#x2F;xxx&#x2F;target 中删除，而且有时候奇奇怪怪的编译报错，直接清空 output&#x2F;xxx 文件夹也能解决。</p><p>❗也不能简单地直接 <strong>只</strong> 删除output&#x2F;xxx&#x2F;target  中的文件，有一些文件、文件夹是在 buildroot 某个模块的编译过程中放进去的，只删除目标文件，而不清楚编译中间文件 output&#x2F;xxx&#x2F;build，那些文件也不会重新生成。</p><p>如果在流程中自动清空 output&#x2F;xxx 文件夹，会导致编译时间变得很长。</p></li><li><p>如何去掉开机必须输入用户名、密码？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">修改 getty 服务</span><br><span class="line">如果你使用的是 getty 来管理终端登录，可以在 /etc/inittab 文件中设置自动登录。</span><br><span class="line"></span><br><span class="line">编辑 /etc/inittab：</span><br><span class="line">打开 /etc/inittab 文件（如果存在），找到类似于以下的行：</span><br><span class="line"></span><br><span class="line">1:2345:respawn:/sbin/getty 38400 tty1</span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line">1:2345:respawn:/sbin/getty --noclear tty1</span><br><span class="line">创建自动登录的脚本：</span><br><span class="line">在 /etc/init.d/ 下创建一个脚本，命名为 autologin，内容如下：</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">exec /bin/login -f your_username</span><br><span class="line">替换 your_username 为你的实际用户名。</span><br><span class="line"></span><br><span class="line">使脚本可执行：</span><br><span class="line">chmod +x /etc/init.d/autologin</span><br></pre></td></tr></table></figure></li><li><p>不显示当前所在路径，增加 <code>/etc/profile</code> 文件。<code>\u: user \h: host</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/profile</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/lib:/lib/3rd:/usr/lib:/mnt/system/lib:/mnt/system/usr/lib:/mnt/system/usr/lib/3rd:/mnt/data/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/mnt/system/usr/bin:/mnt/system/usr/sbin:/mnt/data/bin:/mnt/data/sbin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PS1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;`id -u`&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;# &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PAGER=<span class="string">&#x27;/bin/more &#x27;</span></span><br><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">&#x27;/bin/vi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source configuration files from /etc/profile.d</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh ; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="string">&quot;<span class="variable">$i</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">. <span class="variable">$i</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> i</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=<span class="string">&quot;<span class="subst">$(hostname)</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> OLDPWD=/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># \u: user \h: host</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&#x27;$USER&#x27;</span> == <span class="string">&#x27;root&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> PS1=<span class="string">&#x27;[\u@\h]\w\# &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> PS1=<span class="string">&#x27;[\u@\h]\w\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br></pre></td></tr></table></figure><p>修改之后，就显示 <code>[root@cvitek]~# </code></p></li><li><p>使用 erofs 只读文件系统后，&#x2F;var&#x2F;run 中也只读，导致一些动态生成的文件（如 PID 文件、socket 文件等）无法写入。增加 &#96;&#x2F;etc&#x2F;fstab 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ramdisk/rootfs/common_arm/etc$ cat fstab</span><br><span class="line"># &lt;file system&gt; &lt;mount pt&gt;      &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line">/dev/root       /               ext2    rw,noauto       0       1</span><br><span class="line">proc            /proc           proc    defaults        0       0</span><br><span class="line">devpts          /dev/pts        devpts  defaults,gid=5,mode=620,ptmxmode=0666   0       0</span><br><span class="line">tmpfs           /dev/shm        tmpfs   mode=0777       0       0</span><br><span class="line">tmpfs           /tmp            tmpfs   mode=1777       0       0</span><br><span class="line">tmpfs           /run            tmpfs   mode=0755,nosuid,nodev  0       0</span><br><span class="line">tmpfs           /var/run        tmpfs   mode=0755,nosuid,nodev  0       0</span><br><span class="line">tmpfs           /var/lock       tmpfs   mode=0755,nosuid,nodev  0       0</span><br><span class="line">tmpfs           /var/empty      tmpfs   mode=0755,nosuid,nodev  0       0</span><br><span class="line">sysfs           /sys            sysfs   defaults        0       0</span><br><span class="line">nodev           /sys/kernel/debug debugfs   defaults    0       0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Buildroot </tag>
            
            <tag> Rootfs </tag>
            
            <tag> Cvitek </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
